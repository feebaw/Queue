class Queue {
    private int[] array;
    private int front;
    private int rear;
    private int size;
    private int capacity;

    // Конструктор
    public Queue(int capacity) {
        this.capacity = capacity;
        array = new int[capacity];
        front = 0;
        rear = -1;
        size = 0;
    }

    // Проверка очереди на пустоту
    public boolean isEmpty() {
        return size == 0;
    }

    // Проверка очереди на заполненность
    public boolean isFull() {
        return size == capacity;
    }

    // Добавление элемента в очередь
    public void enqueue(int item) {
        if (isFull()) {
            System.out.println("Queue is overfilled");
        } else {
            rear = (rear + 1) % capacity;
            array[rear] = item;
            size++;
            System.out.println(item + " added to queue");
        }
    }

    // Удаление элемента из очереди
    public int dequeue() {
        if (isEmpty()) {
            System.out.println("Queue is empty");
            return -1;
        } else {
            int item = array[front];
            front = (front + 1) % capacity;
            size--;
            return item;
        }
    }

    // Получение элемента из начала очереди
    public int front() {
        if (isEmpty()) {
            System.out.println("Queue is empty");
            return -1;
        } else {
            return array[front];
        }
    }

    // Вывод содержимого очереди
    public void printQueue() {
        if (isEmpty()) {
            System.out.println("Queue is empty");
        } else {
            System.out.println("Queue:");
            for (int i = 0; i < size; i++) {
                System.out.print(array[(front + i) % capacity] + " ");
            }
            System.out.println();
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Queue queue = new Queue(5);

        queue.enqueue(1);
        queue.enqueue(2);
        queue.enqueue(3);
        queue.printQueue();

        System.out.println("First element of queue: " + queue.front());

        queue.dequeue();
        queue.printQueue();
    }
}
